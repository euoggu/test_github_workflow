name: BuildandPackageArtifacts

on:
  push:
    branches: [ "main" ]

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  job1:
    name: 拉取代码、编译和上传JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 检出代码
      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 缓存 Maven 依赖
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: 使用 Maven 编译
        run: mvn clean install
      - name: 查找并复制 JAR 工件
        id: find_jar
        run: |
          set -x
          JAR_PATH=$(find target -name "*.jar")
          cp "$JAR_PATH" target/app.jar
          echo "JAR_PATH=target/app.jar" >> $GITHUB_OUTPUT
      - name: 上传 JAR
        id: upload_jar
        uses: actions/upload-artifact@v3
        with:
          name: app.jar
          path: ${{ steps.find_jar.outputs.JAR_PATH }}

  job2:
    name: 制作Linux AMD64工件
    needs: job1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        name: 下载 JAR
        with:
          name: app.jar
      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 使用 jpackage 创建应用程序镜像 (Linux AMD64)
        run: |
          set -x
          jpackage \
            --name my-app-linux-amd64 \
            --verbose \
            --description "我的 Spring Boot 应用程序 (Linux AMD64)" \
            --vendor "我的公司" \
            --input . \
            --main-jar "app.jar" \
            --dest output-linux-amd64
      - name: 上传 Linux AMD64 工件
        uses: actions/upload-artifact@v3
        with:
          name: linux-amd64-package
          path: output-linux-amd64
  job3:
    name: 制作macOS ARM64工件
    needs: job1
    runs-on: macos-latest
    steps:
      - name: 确认 Runner 架构
        run: |
          echo "Runner 架构: $(uname -m)"
          if [[ "$(uname -m)" != "arm64" ]]; then
            echo "当前 Runner 不是 ARM64 架构！"
            exit 1
          fi
      - uses: actions/download-artifact@v3
        name: 下载 JAR
        with:
          name: app.jar
      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: 'arm64'
      - name: 使用 jpackage 创建应用程序镜像 (macOS ARM64)
        run: |
          set -x
          jpackage \
            --name my-app-macos-arm64 \
            --verbose \
            --description "我的 Spring Boot 应用程序 (macOS ARM64)" \
            --vendor "我的公司" \
            --input . \
            --main-jar "app.jar" \
            --dest output-macos-arm64
      - name: 上传 macOS ARM64 工件
        uses: actions/upload-artifact@v3
        with:
          name: macos-arm64-package
          path: output-macos-arm64
  job4:
    name: 制作Windows AMD64工件
    needs: job1
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v3
        name: 下载 JAR
        with:
          name: app.jar
      - name: 设置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 使用 jpackage 创建应用程序镜像 (Windows AMD64)
        shell: bash
        run: |
          set -x
          # Start of Selection
          jpackage \
            --name my-app-windows-arm64 \
            --verbose \
            --description "我的 Spring Boot 应用程序 (Windows ARM64)" \
            --vendor "MyCompany" \
            --input . \
            --main-jar "app.jar" \
            --dest output-windows-arm64

      - name: 上传 Windows AMD64 工件
        uses: actions/upload-artifact@v3
        with:
          name: windows-arm64-package
          path: output-windows-arm64
  # 下面是要添加的 job5
  job5:
    name: 等待 job2, job3, job4 执行完后下载工件并创建 Release
    needs: [job2, job3, job4]    # 等待 job2, job3, job4 全部完成
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 获取最新 Tag
        id: get_tag
        run: |
          # 不再使用 --unshallow
          git fetch --prune --tags
          
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: 下载 Linux AMD64 工件
        uses: actions/download-artifact@v3
        with:
          name: linux-amd64-package
          path: ./release/linux-amd64

      - name: 下载 macOS ARM64 工件
        uses: actions/download-artifact@v3
        with:
          name: macos-arm64-package
          path: ./release/macos-arm64

      - name: 下载 Windows AMD64 工件
        uses: actions/download-artifact@v3
        with:
          name: windows-amd64-package
          path: ./release/windows-amd64
      - name: 创建 Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.LATEST_TAG }}             # 使用刚才获取的最新 tag
          name: "Release ${{ env.LATEST_TAG }}"  # Release 名称也可以与 tag 同名
          body: |
            自动构建并发布的多平台工件。 
            包含:
            - Linux AMD64
            - macOS ARM64
            - Windows AMD64
          draft: false
          prerelease: false
          artifacts: |
            ./release/linux-amd64/**/*
            ./release/macos-arm64/**/*
            ./release/windows-amd64/**/*